/*
*   在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名。
*
*   在编写每个模块时，都有require、exports、module三个预先定义好的变量可供使用。
*/
/**
 *  require函数用于在当前哦快中加载和使用别的模块
 *  传入一个模块名，返回一个模块导出对象
 *  模块名可使用相对路径（以./开头），或者是绝对路径（以/或C:之类的盘符开头）
 *  另外，模块名中的.js扩展名可以省略
 *  还可以用来加载json文件 如: var data = require('./data.json');
 */
var http = require('http');

/*
*   exports对象是当前模块的导出对象，用于导出模块公有方法和属性。
*   别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。
*/
exports.hello = function () {
    console.log('Hello World!');
};

/*
 *  通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。
 *
 *  例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。
 */
module.exports = function () {
    console.log('Hello World!');
};

/*
*   模块初始化
*   一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。
*   之后，缓存起来的导出对象被重复利用。
*
*   主模块
*   通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。
*   主模块负责调度组成整个程序的其它模块完成工作。
*
*   二进制模块
*   虽然一般我们使用JS编写模块，但NodeJS也支持使用C/C++编写二进制模块。
*   编译好的二进制模块除了文件扩展名是.node外，和JS模块的使用方式相同。
*/